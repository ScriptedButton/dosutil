#!/bin/bash

# Cole Brooks
# A simple Bash script used to streamline common functions in Linux.
# Last Rev. 11/8/2023
# command - the command to invoke within dosutil
# param1 - the first command parameter
# param2 - the second command parameter

# Function to display the help message
display_help() {
    echo "Supported commands:"
    echo "author - output your name in the form last, first"
    echo "type - output the content of the file in the first parameter"
    echo "copy - copy a file or directory"
    echo "ren - rename a file or directory"
    echo "move - move a file or directory"
    echo "del - delete a file or directory (without asking for confirmation)"
    echo "help - output a list of supported commands, their action, and required parameters"
}

# Function to execute Linux commands and verify success
execute_linux_command() {
    local command=("$@")  # Store all arguments in an array

    echo "UNIX command ran: ${command[*]}"

    "${command[@]}"
}

# Function to execute script-specific commands
run_script_command() {
    local script_command=$1
    shift
    case $script_command in
        author)
            echo "Brooks, Cole" ;;
        type)
            verify_file "$1"
            if [ -f "$1" ]; then
                cat "$1"
            fi ;;
        copy)
            copy_file "$1" "$2" ;;
        copy!)
            copy_file_overwrite "$1" "$2" ;;
        ren)
            rename_file "$1" "$2" ;;
        ren!)
            rename_file_overwrite "$1" "$2" ;;
        move)
            move_file "$1" "$2" ;;
        move!)
            move_file_overwrite "$1" "$2" ;;
        del)
            delete_file "$1" ;;
        help)
            display_help ;;
        *)
            echo "Invalid script command: $script_command" ;;
    esac
}

# Function to handle non-interactive mode
non_interactive_mode() {
    local command=("$@")
    run "${command[@]}"
    exit 0
}

# Function to verify if a file exists and its type (regular file or directory)
verify_file() {
    local file=$1
    if [ -e "$file" ]; then
        if [ -f "$file" ]; then
            echo "File '$file' exists."
        elif [ -d "$file" ]; then
            echo "Directory '$file' exists."
        else
            echo "Unknown type: '$file'"
        fi
    else
        echo "File or directory '$file' does not exist."
    fi
}

# Function to copy a file or directory
copy_file() {
    verify_file "$1"
    if [ -e "$2" ]; then
        echo "File or directory '$2' already exists. Use 'copy!' to overwrite."
    else
        execute_linux_command "cp" "-r" "$1" "$2"
    fi
}

# Function to copy a file or directory, overwriting if necessary
copy_file_overwrite() {
    verify_file "$1"
    execute_linux_command "cp" "-rf" "$1" "$2"
}

# Function to rename a file or directory
rename_file() {
    verify_file "$1"
    if [ -e "$2" ]; then
        echo "File or directory '$2' already exists. Use 'ren!' to overwrite."
    else
        execute_linux_command "mv" "$1" "$2"
    fi
}

# Function to rename a file or directory, overwriting if necessary
rename_file_overwrite() {
    verify_file "$1"
    execute_linux_command "mv" "$1" "$2"
}

# Function to move a file or directory
move_file() {
    verify_file "$1"
    if [ -e "$2" ]; then
        echo "File or directory '$2' already exists. Use 'move!' to overwrite."
    else
        execute_linux_command "mv" "$1" "$2"
    fi
}

# Function to move a file or directory, overwriting if necessary
move_file_overwrite() {
    verify_file "$1"
    execute_linux_command "mv" "-f" "$1" "$2"
}

# Function to delete a file or directory
delete_file() {
    local file="$1"

    verify_file "$file"

    if [ -e "$file" ]; then
        execute_linux_command "rm" "-rf" "$file"
    fi
}

list_and_sort_files() {
    local sort_option=$1
    case $sort_option in
        NAME)
            files=($(ls -1 | sort))
            ;;
        AGE)
            files=($(ls -1t))
            ;;
        SIZE)
            files=($(ls -1S))
            ;;
        *)
            files=($(ls -1))
            ;;
    esac
}

# Parse command line options
while getopts ":" opt; do
    case $opt in
        \?)
            echo "Invalid option: -$OPTARG" >&2
            display_help
            exit 1 ;;
    esac
done

shift $((OPTIND - 1))

# Check if there are command-line arguments for non-interactive mode
if [ $# -gt 0 ]; then
    non_interactive_mode "$@"
fi

# Interactive mode
echo "Entering interactive mode..."

sorting_options=(NAME AGE SIZE)

echo "-- SORTING SELECTION --"
PS3=$'-- SORTING SELECTION --

Please select a sorting option: '


select sort_option in ${sorting_options[*]} "QUIT"; do
    case $sort_option in
        "QUIT")
            echo "Exiting interactive mode."
            exit 0
            ;;
        *)
            list_and_sort_files "$sort_option"
            echo "Sorting by $sort_option..."
            clear
            echo -"-- DIRECTORY LISTING --"
            PS3=$'-- DIRECTORY LISTING\n\nPlease select a file or directory: '
            select file in "${files[@]}" "Quit"; do
                case $file in
                    "Quit")
                        echo "Exiting interactive mode."
                        exit 0
                        ;;
                    *)
                        PS3="Please select a command: "
                        select cmd in "type" "copy" "copy!" "ren" "ren!" "move" "move!" "del" "help" "Quit"; do
                            case $cmd in
                                "Quit")
                                    echo "Exiting interactive mode."
                                    exit 0
                                    ;;
                                "help")
                                    display_help
                                    ;;
                                *)
                                    read -p "Enter additional parameters if any: " param1 param2
                                    run_script_command "$cmd" "$file" "$param1" "$param2"
                                    break
                                    ;;
                            esac
                        done
                        break
                        ;;
                esac
            done
            break
            ;;
    esac
done

exit 0
